sub('B$', '', "1.2B")
sub('[BM]$', '', "1.2B")
sub('[BM]$', '', "1.2M")
ConvertKMB <- function(kmb=factor()){
return(
unname(
c(B=1e9, M= 1e6, K= 1e3)[gsub('\\d+', '', kmb)]*
as.numeric(sub('[KMB]$', '', as.character(kmb)))
)
)
}
ConvertKMB(tickerKeyStats$`Market Cap`)
as.numeric(sub('[KMB]$', '', as.character(tickerKeyStats$`Market Cap`)))
c(B=1e9, M= 1e6, K= 1e3)[gsub('\\d+', '', tickerKeyStats$`Market Cap`)]
c(B=1e9, M= 1e6, K= 1e3)[gsub('\\d+', '', as.character(tickerKeyStats$`Market Cap`))]
uname(c(B=1e9, M= 1e6, K= 1e3)[gsub('\\d+', '', as.character(tickerKeyStats$`Market Cap`))])
ConvertKMB <- function(kmb=factor()){
return(
unname(
c(B=1e9, M= 1e6, K= 1e3)[gsub('\\d+', '', as.character(kmb))]
)*
as.numeric(sub('[KMB]$', '', as.character(kmb)))
)
}
ConvertKMB(tickerKeyStats$`Market Cap`)
?uname
??uname
?unname
as.numeric(sub('[KMB]$', '', as.character(tickerKeyStats$`Market Cap`)))
as.numeric(sub('[KMB]$', '*1e6', as.character(tickerKeyStats$`Market Cap`)))
as.numeric(sub('[:digit:]$', '1e6', as.character(tickerKeyStats$`Market Cap`)))
as.numeric(sub('[^[:digit:]]', '1e6', as.character(tickerKeyStats$`Market Cap`)))
c(B=1e9, M= 1e6, K= 1e3)[gsub('\\d+', '', as.character(100B))]
c(B=1e9, M= 1e6, K= 1e3)[gsub('\\d+', '', as.character("100B"))]
unname(c(B=1e9, M= 1e6, K= 1e3)[gsub('\\d+', '', as.character("100B"))])
unname(c(B=1e9, M= 1e6, K= 1e3)[gsub('\\d+', '', as.character("1.00B"))])
unname(c(B=1e9, M= 1e6, K= 1e3)[gsub('\\d+', '', as.character(sub(".","","1.00B")))])
unname(c(B=1e9, M= 1e6, K= 1e3)[gsub('\\d+', '', sub(".","",as.character("1.00B")))])
require(stringr)
str_sub("1.00B",start=-1)
c(B=1e9, M= 1e6, K= 1e3)[str_sub("1.00B",start=-1)]
ConvertKMB <- function(kmb=factor()){
return(
unname(
c(B=1e9, M= 1e6, K= 1e3)[str_sub("kmb",start=-1)]
)*
as.numeric(sub('[KMB]$', '', as.character(kmb)))
)
}
ConvertKMB(tickerKeyStats$`Market Cap`)
as.numeric(sub('[KMB]$', '', as.character(tickerKeyStats$`Market Cap`)))
tickerKeyStats$`Market Cap`
unname(
c(B=1e9, M= 1e6, K= 1e3)[str_sub("1.86B",start=-1)]
)
c(B=1e9, M= 1e6, K= 1e3)[str_sub(kmb,start=-1)]
ConvertKMB <- function(kmb=factor()){
return(
unname(
c(B=1e9, M= 1e6, K= 1e3)[str_sub(as.character(kmb),start=-1)]
)*
as.numeric(sub('[KMB]$', '', as.character(kmb)))
)
}
ConvertKMB(tickerKeyStats$`Market Cap`)
tickerSummary
tickerKeyStats
tickerKeyStats$`Avg Vol`
ConvertKMB <- function(kmb=factor()){
kmb.str <- as.character(kmb)
# remove commas
kmb.str <- sub(',','',kmb.str)
return(
unname(
c(B=1e9, M= 1e6, K= 1e3)[str_sub(kmb,start=-1)]
)*
as.numeric(sub('[KMB]$', '', kmb))
)
}
ConvertKMB(tickerKeyStats$`Market Cap`)
ConvertKMB(tickerKeyStats$`Avg Vol`)
sub(',','',tickerKeyStats$`Avg Vol`)
ConvertKMB <- function(kmb=factor()){
kmb.str <- as.character(kmb)
return(
unname(
c(B=1e9, M= 1e6, K= 1e3)[str_sub(kmb,start=-1)]
)*
as.numeric(sub('[KMB]$', '', kmb))
)
}
ConvertComma <- function(comma=factor()){
kmb.str <- as.character(kmb)
# remove commas
return(as.numeric(sub(',','',kmb.str)))
}
ConvertKMB(tickerKeyStats$`Market Cap`)
ConvertComma(tickerKeyStats$`Avg Vol`)
return(as.numeric(sub(',','',comma.str)))
ConvertKMB <- function(kmb=factor()){
kmb.str <- as.character(kmb)
return(
unname(
c(B=1e9, M= 1e6, K= 1e3)[str_sub(kmb,start=-1)]
)*
as.numeric(sub('[KMB]$', '', kmb))
)
}
ConvertComma <- function(comma=factor()){
comma.str <- as.character(comma)
# remove commas
return(as.numeric(sub(',','',comma.str)))
}
ConvertKMB(tickerKeyStats$`Market Cap`)
ConvertComma(tickerKeyStats$`Avg Vol`)
ConvertKMB(tickerKeyStats$`Market Cap`) > 500
ConvertKMB(tickerKeyStats$`Market Cap`) > 500000
ConvertKMB(tickerKeyStats$`Market Cap`) > 500000000
ConvertKMB(tickerKeyStats$`Market Cap`) > 5000000000
tickerKeyStats$5 `5 Year Average Dividend Yield`
tickerKeyStats$`5 Year Average Dividend Yield`
tickerKeyStats$`Book Value Per Share`
tickerKeyStats$`Book Value Per Share`*2
as.numeric(tickerKeyStats$`Book Value Per Share`)*2
as.numeric(tickerKeyStats$`Book Value Per Share`)
as.numeric(as.character(tickerKeyStats$`Book Value Per Share`))
as.numeric(as.character(tickerKeyStats$`Book Value Per Share`))*2
tickerKeyStats$`Trailing P/E`
knitr::opts_chunk$set(echo = TRUE)
require(XML)
require(quantmod)
options("getSymbols.warning4.0"=FALSE)
require(xtable)
require(dplyr)
require(stringr)
ConvertComma(tickerKeyStats$`Avg Vol`)
KeyStats <- function(symbol) {
yahoo.URL <- "http://finance.yahoo.com/q/ks?s="
html_text <- htmlParse(paste(yahoo.URL, symbol, sep = ""), encoding="UTF-8")
#search for <td> nodes anywhere that have class 'yfnc_tablehead1'
nodes <- getNodeSet(html_text, "/*//td[@class='yfnc_tablehead1']")
if(length(nodes) > 0 ) {
measures <- sapply(nodes, xmlValue)
#Clean up the column name
measures <- gsub(" *[0-9]*:", "", gsub(" \\(.*?\\)[0-9]*:","", measures))
#Remove dups
dups <- which(duplicated(measures))
#print(dups)
for(i in 1:length(dups))
measures[dups[i]] = paste(measures[dups[i]], i, sep=" ")
#use siblings function to get value
values <- sapply(nodes, function(x)  xmlValue(getSibling(x)))
df <- data.frame(t(values))
colnames(df) <- measures
return(df)
} else {
break
}
}
KeyStats("AAN")
KeyStats("AGCO")
tmp<-KeyStats("AGCO")
tmp$`Avg Vol`
ConvertComma(tmp$`Avg Vol`)
sub(',','',ConvertComma(tmp$`Avg Vol`))
sub(',','',"100,000")
sub(',','',"100,000,000")
gsub(',','',"100,000,000")
s2$IS$A[3,]
s2$IS$A
tickerKeyStats$Revenue
tickerKeyStats$`Qtrly Earnings Growth`
s2$IS$A
tickerKeyStats$`% Held by Insiders`
length(tickers)
tickerKeyStats$`Book Value Per Share`
tickerKeyStats$`Price/Book`
tickers(11:15)
?echo
??echo
paste0(url1,"1",url2)
KeyStats("AEL")
KeyStats(ANAt)
KeyStats(ANAT)
KeyStats("ANAT")
KeyStats("ARCB")
KeyStats("ADM")
KeyStats("ARCC")
KeyStats("ARCC")
NA > 0
tickerKeyStats
tmp <- KeyStats("AGCO")
tmp$5`5 Year Average Dividend Yield`
tmp$`5 Year Average Dividend Yield`
tmp$`5 Year Average Dividend Yield` > -
0
tmp$`5 Year Average Dividend Yield` > 0
as.numeric(as.character(tmp$`5 Year Average Dividend Yield`))
as.numeric(as.character(tmp$`5 Year Average Dividend Yield`)) > 0
if (as.numeric(as.character(tmp$`5 Year Average Dividend Yield`)) > 0) { print("yes")}
if (as.numeric(as.character(tmp$`5 Year Average Dividend Yield`)) == NA) { print("yes")}
if (as.numeric(as.character(tmp$`5 Year Average Dividend Yield`)) == "NA") { print("yes")}
if (is.na(tmp$`5 Year Average Dividend Yield`)) {print("yes")}
is.na(tmp$`5 Year Average Dividend Yield`)
tmp$`5 Year Average Dividend Yield`
tmp$`5 Year Average Dividend Yield` == "N/A"
as.character(tmp$`5 Year Average Dividend Yield`) == "N/A"
tickerKeyStats$`Total Debt/Equity`
s2$BS$A
s2 <- getFin("AAN",src="yahoo",auto.assign = F)
s2$BS$A
getFin("AGII",src="yahoo",auto.assign = F)
getFin("AHL",src="yahoo",auto.assign = F)
getFin("ASB",src="yahoo",auto.assign = F)
getFin("AGO",src="yahoo",auto.assign = F)
getFin("AV",src="yahoo",auto.assign = F)
getFin("AV",src="yahoo",auto.assign = F)
getFin("AV",src="google",auto.assign = F)
s2<-getFin("AV",src="google",auto.assign = F)
s2
s2<-getFin("AV",src="yahoo",auto.assign = F)
s2
s2<-getFin("AAN",src="yahoo",auto.assign = F)
s2
s2<-getFin("AV",src="yahoo",auto.assign = F)
s2
?error
??Error
tryCatch.W.E <- function(expr)
{
W <- NULL
w.handler <- function(w){ # warning handler
W <<- w
invokeRestart("muffleWarning")
}
list(value = withCallingHandlers(tryCatch(expr, error = function(e) e),
warning = w.handler),
warning = W)
}
tryCatch.W.E(tryCatch.W.E <- function(expr)
{
W <- NULL
w.handler <- function(w){ # warning handler
W <<- w
invokeRestart("muffleWarning")
}
list(value = withCallingHandlers(tryCatch(expr, error = function(e) e),
warning = w.handler),
warning = W)
}
)
tryCatch.W.E(getFin("AV",src="yahoo",auto.assign = F))
tryCatch.W.E(s2<-getFin("AV",src="yahoo",auto.assign = F))
s2
err<-tryCatch.W.E(s2<-getFin("AV",src="yahoo",auto.assign = F))
err
err<-tryCatch.W.E(s2<-getFin("AAN",src="yahoo",auto.assign = F))
err
err$value
err<-tryCatch.W.E(s2<-getFin("AV",src="yahoo",auto.assign = F))
err$value
match(err$value,"simpleError")
?match
"simpleError" %in% err$value
err$value %in% "simpleError"
err$value[1]
err$value[2]
err$value$message
err<-tryCatch.W.E(s2<-getFin("AAN",src="yahoo",auto.assign = F))
err$warning
err<-tryCatch.W.E(s2<-getFin("AAN",src="yahoo",auto.assign = F))
err$value
err<-tryCatch.W.E(s2<-getFin("AV",src="yahoo",auto.assign = F))
err$value$call
err$value$message
if (err$value$message == "NA/NaN argument") {print "yes"}
err$value$message == "NA/NaN argument"
err$value$message == "NA/NaN argumen"
err$value$message == "NA/NaN argument"
if(err$value$message)
is.object(err$value$message)
err$value$message
is.character(err$value$message)
err<-tryCatch.W.E(s2<-getFin("AAN",src="yahoo",auto.assign = F))
is.character(err$value$message)
tickerKeyStats
tmp
tmp<-KeyStats("AV")
tmp
s2
s2 <- getFin("AV",src="yahoo",auto.assign = F))
s2 <- getFin("AAN",src="yahoo",auto.assign = F))
s2 <- getFin("AAN",src="yahoo",auto.assign = F)
s2
s2$ISA[3,1]
s2$IS$A
s2$IS$A[3,1]
s2$IS$A[3,4
]
s2 <- getFin("ARCC",src="yahoo",auto.assign = F)
s2
s2$IS$A[3,1]
s2$IS$A[3,4]
s2 <- getFin("AGII",src="yahoo",auto.assign = F)
s2$IS$A[3,4]
s2$IS$A[3,1]
s2 <- getFin("AHL",src="yahoo",auto.assign = F)
s2$IS$A[3,1]
s2$IS$A[3,4]
s2 <- getFin("ASB",src="yahoo",auto.assign = F)
s2$IS$A[3,1]
s2$IS$A[3,4]
class(s2$IS$A[3,4])
s2$IS$A[3,4]
url4<-"http://finance.yahoo.com/q/pr?s=AAN+Profile"
profile <- readHTMLTable(paste0(url4), header=F,
stringsAsFactors=F,as.data.frame = T)
profile
profile <- readHTMLTable(paste0(url4), header=F,which=1
stringsAsFactors=F,as.data.frame = T)
profile <- readHTMLTable(paste0(url4), header=F,which=1,
stringsAsFactors=F,as.data.frame = T)
profile
profile <- readHTMLTable(paste0(url4), header=F,which=2,
stringsAsFactors=F,as.data.frame = T)
stringsAsFactors=F,as.data.frame = T)
profile
profile <- readHTMLTable(paste0(url4), header=F,which=5,
stringsAsFactors=F,as.data.frame = T)
profile
profile <- readHTMLTable(paste0(url4), header=F,which=6,
stringsAsFactors=F,as.data.frame = T)
profile
profile <- readHTMLTable(paste0(url4), header=F,which=7,
stringsAsFactors=F,as.data.frame = T)
profile
profile <- readHTMLTable(paste0(url4), header=F,which=8,
stringsAsFactors=F,as.data.frame = T)
profile
profile <- readHTMLTable(paste0(url4), header=F,which=8,skip.rows = c(1),
stringsAsFactors=F,as.data.frame = T)
profile
tmp <- readHTMLTable(paste0(url1,"AAN",url2), header=F,
which=8, skip.rows = c(1),
stringsAsFactors=F, as.data.frame = T)
tmp <- readHTMLTable(paste0(url1,"AGCO",url2), header=F,
which=8, skip.rows = c(1),
stringsAsFactors=F, as.data.frame = T)
require(XML)
tmp <- readHTMLTable(paste0(url1,"AGCO",url2), header=F,
which=8, skip.rows = c(1),
stringsAsFactors=F, as.data.frame = T)
?readHTMLTable
url1 <- "http://finance.yahoo.com/q/pr?s="
url2 <- "+Profile"
tmp <- readHTMLTable(paste0(url1,"AGCO",url2), header=F,
which=8, skip.rows = c(1),
stringsAsFactors=F, as.data.frame = T)
tmp
tmp[1,2]
tmp[2,2]
Profile <- function(ticker = character()) {
url1 <- "http://finance.yahoo.com/q/pr?s="
url2 <- "+Profile"
tmp <- readHTMLTable(paste0(url1,ticker,url2), header=F,
which=8, skip.rows = c(1),
stringsAsFactors=F, as.data.frame = T)
profile <- data.frame(index = tmp[1,2],
sector = tmp[2,2],
industry = tmp[3,2],
employees = tmp[4,2])
return(profile)
}
Profile("AGCO")
xtable(Profile("AGCO"),type='html',comment=FALSE)
which=8, skip.rows = c(1),
tmp <- readHTMLTable(paste0(url1,"AGCO",url2), header=F,
stringsAsFactors=F, as.data.frame = T)
tmp
tmp <- readHTMLTable(paste0(url1,"AGCO",url2), header=F,
which=8, skip.rows = c(1),
stringsAsFactors=F, as.data.frame = T)
tmp
tmp <- readHTMLTable(paste0(url1,"AGCO",url2), header=F,
which=2, skip.rows = c(1),
stringsAsFactors=F, as.data.frame = T)
tmp
tmp <- readHTMLTable(paste0(url1,"AGCO",url2), header=F,
skip.rows = c(1),
stringsAsFactors=F, as.data.frame = T)
tmp
tmp <- readHTMLTable(paste0(url1,"AGCO",url2), header=F,
stringsAsFactors=F, as.data.frame = T)
which=5,skip.rows = c(1),
tmp
tmp <- readHTMLTable(paste0(url1,"AGCO",url2), header=F,
which=5,skip.rows = c(1),
stringsAsFactors=F, as.data.frame = T)
tmp
tmp$V1
tmp[2,1]
tmp<-"N/A"
?echo
?print
?console
??console
??print
tickers[64]
KeyStats("CODI")
tmp<-KeyStats("CODI")
tickers
tmp$`Trailing P/E`
tmp$`5 Year Average Dividend Yield`
tmp$Revenue
tmp$`Avg Vol`
tmp$`Price/Book`
tickers[63]
tickers[64]
knitr::opts_chunk$set(echo = TRUE)
require(XML)
require(quantmod)
options("getSymbols.warning4.0"=FALSE)
require(xtable)
require(dplyr)
require(stringr)
NumberOfStocksInScreen <- function(url1=character(), url2=character()){
## read first table from page
numstk <- readHTMLTable(paste0(url1,1,url2), which=1, header=F,
stringsAsFactors=F,as.data.frame = T)
## total number of tickers returned from the screen and the particular
## tickers contained in the table is contained in first element of first
## table. Ex: "Stock Screener Search Results (Showing 1 to 20 of 261)"
## We want just the integers from this element.
## Take first element of first column
numstk <- numstk[1,1]
## split string at non-digits
numstk <- strsplit(numstk, "[^[:digit:]]")
## convert strings to numeric ("" become NA)
numstk <- as.numeric(unlist(numstk))
## remove NA
numstk <- numstk[!is.na(numstk)]
return(numstk[3])
}
StockScreenTickerList<- function(i=integer(),
url1=character(),
url2=character()) {
## read second table from page
tickers <- readHTMLTable(paste0(url1,i,url2), header=F, which=2,
stringsAsFactors=F,as.data.frame = T)
## Stock tickers are in the first column
tickers <- tickers[,1]
## First ticker is at index 3
firstTicker<-3
## Last ticker is at next to last index
lastTicker<-length(tickers)-1
tickers<-tickers[firstTicker:lastTicker]
# remove Toronto exchange tickers
tickers <- tickers[grep(".TO",tickers,invert = T)]
return(tickers)
}
StockScreenTickers <- function(numberOfTickers=integer(),
url1=character(),
url2=character()) {
maxTickersInTable <- 20
tickers <- character()
for (i in seq(1,numberOfTickers,maxTickersInTable)) {
tickers <- append(tickers,
StockScreenTickerList(i, url1, url2))
}
return(tickers)
}
url1<-"http://screener.finance.yahoo.com/b?vw=0&b="
url2<-"&s=nm&pe=/15&pr=10/&mc=100000000/&dvy=0.1/&pb=/1.5&re=500000000/&db=stocks"
numstks <- NumberOfStocksInScreen(url1,url2)
tickers <- StockScreenTickers(numstks,url1,url2)
tickers
length(tickers)
tickers[63]
tickers[64]
tmp<-KeyStats("COP")
tmp$`Market Cap`
tmp$Revenue
tmp$`Price/Book`
tmp$`Trailing P/E`
ConvertF
ConvertFactor(tmp$`Trailing P/E`)
ConvertFactor <- function(fctr=factor()){
return(as.numeric(as.character(fctr)))
}
ConvertKMB <- function(kmb=factor()){
kmb.str <- as.character(kmb)
return(
unname(
c(B=1e9, M= 1e6, K= 1e3)[str_sub(kmb,start=-1)]
)*
as.numeric(sub('[KMB]$', '', kmb))
)
}
ConvertComma <- function(comma=factor()){
comma.str <- as.character(comma)
# remove commas
return(as.numeric(gsub(',','',comma.str)))
}
ConvertFactor(tmp$`Trailing P/E`)
is.numeric(pe.ticker)
is.numeric(ConvertFactor(tmp$`Trailing P/E`))
tickers[63]
?quantmod
getQuote("AAPL")
standardQuote("AAPL")
getDividends("AAPL")
paste(getQuote("AAPL", what=yahooQF("Name"))[,2])
